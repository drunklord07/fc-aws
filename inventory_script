#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
AWS Full ARN Inventory — Commercial Partitions (All Regions + Global)
- One Excel sheet per region + 'global'
- Least-privilege list/describe calls only
- Union of user-provided services (≈90)
- No silent skips: every attempt logged; every miss/errors recorded
- Text logs: attempted_apis.txt, errors.txt, summary_counts.txt
"""

from __future__ import annotations
import os, sys, json, time, traceback
from datetime import datetime, timezone
from typing import Dict, List, Tuple, Optional, Callable
from collections import defaultdict

# ===================== CONFIGURATION =====================
PROFILE_NAME = "default"             # Use your configured CLI profile
ROLE_ARN = ""                        # Optional: role to assume
EXTERNAL_ID = ""                     # Optional: external id for assume role
SESSION_NAME = "arn-inventory-session"

INCLUDE_OPT_IN_REGIONS = True        # Include opt-in (expect OptInRequired where disabled)
OUTPUT_XLSX = "aws-arns.xlsx"
LOG_DIR = "./logs"
REQUEST_RETRIES = 3                  # Retries for throttling/transients
BACKOFF_SECONDS = 1.2
VERBOSE_ERROR_TRACES = False         # Put stack traces into errors.txt
# ========================================================

try:
    import boto3, botocore
    from botocore.config import Config as BotoConfig
except Exception:
    print("Install AWS libs: pip install boto3 botocore", file=sys.stderr); raise

try:
    from openpyxl import Workbook
    from openpyxl.utils import get_column_letter
except Exception:
    print("Install openpyxl: pip install openpyxl", file=sys.stderr); raise

try:
    from tqdm import tqdm
except Exception:
    class tqdm:
        def __init__(self, iterable=None, total=None, desc=None): self.iterable = iterable or []
        def __iter__(self): return iter(self.iterable)
        def update(self, *_a, **_k): pass
        def close(self): pass

# ---------- region & global service hints ----------
GLOBAL_SERVICES = {
    "iam": "us-east-1",
    "cloudfront": "us-east-1",
    "route53": "us-east-1",
    "organizations": "us-east-1",
    "waf": "us-east-1",          # classic global
    "support": "us-east-1",
    "trustedadvisor": "us-east-1",
    "sts": "us-east-1",
    "budgets": "us-east-1",      # budgets API endpoint
}

FALLBACK_REGIONS = [
    "af-south-1",
    "ap-east-1","ap-south-1","ap-south-2",
    "ap-southeast-1","ap-southeast-2","ap-southeast-3","ap-southeast-4","ap-southeast-5","ap-southeast-6","ap-southeast-7",
    "ap-northeast-1","ap-northeast-2","ap-northeast-3",
    "ca-central-1","ca-west-1",
    "eu-central-1","eu-central-2",
    "eu-north-1",
    "eu-south-1","eu-south-2",
    "eu-west-1","eu-west-2","eu-west-3",
    "il-central-1",
    "me-central-1","me-south-1",
    "sa-east-1",
    "us-east-1","us-east-2","us-west-1","us-west-2"
]

# ---------- utilities ----------
def utc_now(): return datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")
def ensure_dir(p): os.makedirs(p, exist_ok=True)
def write_line(path: str, txt: str):
    with open(path, "a", encoding="utf-8") as f: f.write(txt.rstrip("\n")+"\n")

def safe_get(d, k, default=None):
    return d.get(k, default) if isinstance(d, dict) else default

def build_session(profile: str, region: Optional[str] = None):
    if ROLE_ARN:
        base = boto3.Session(profile_name=profile) if profile else boto3.Session()
        sts = base.client("sts", region_name="us-east-1", config=BotoConfig(retries={"max_attempts": 3}))
        kw = {"RoleArn": ROLE_ARN, "RoleSessionName": SESSION_NAME}
        if EXTERNAL_ID: kw["ExternalId"] = EXTERNAL_ID
        creds = sts.assume_role(**kw)["Credentials"]
        return boto3.Session(
            aws_access_key_id=creds["AccessKeyId"],
            aws_secret_access_key=creds["SecretAccessKey"],
            aws_session_token=creds["SessionToken"],
            region_name=region
        )
    return boto3.Session(profile_name=profile, region_name=region)

def discover_account_partition(sess) -> Tuple[str,str]:
    sts = sess.client("sts", region_name="us-east-1", config=BotoConfig(retries={"max_attempts": 3}))
    ident = sts.get_caller_identity()
    return ident["Account"], "aws"  # commercial only

def discover_regions(sess, include_opt_in=True) -> List[str]:
    try:
        ec2 = sess.client("ec2", region_name="us-east-1", config=BotoConfig(retries={"max_attempts": 3}))
        args = {"AllRegions": True} if include_opt_in else {}
        resp = ec2.describe_regions(**args)
        regs = []
        for r in resp.get("Regions", []):
            status = r.get("OptInStatus", "opt-in-not-required")
            if status in {"opt-in-not-required","opted-in"} or include_opt_in:
                regs.append(r["RegionName"])
        return sorted(set(regs))
    except Exception:
        return sorted(set(FALLBACK_REGIONS))

def call_boto(fn: Callable, attempted: str, errors: str, service: str, region: str, rtype: str, api: str, **kwargs):
    write_line(attempted, f"{utc_now()} | region={region} | service={service} | resource={rtype} | API={api} | args={json.dumps(kwargs, default=str)}")
    for i in range(REQUEST_RETRIES):
        try:
            return fn(**kwargs)
        except botocore.exceptions.ClientError as ce:
            code = safe_get(safe_get(ce.response, "Error", {}), "Code", "ClientError")
            msg  = safe_get(safe_get(ce.response, "Error", {}), "Message", str(ce))
            rid  = safe_get(safe_get(ce.response, "ResponseMetadata", {}), "RequestId", "-")
            write_line(errors, f"{utc_now()} | region={region} | service={service} | resource={rtype} | API={api} | ERROR={code} | requestId={rid} | {msg}")
            if code in {"Throttling","ThrottlingException","TooManyRequestsException","RequestLimitExceeded","LimitExceededException","ServiceUnavailableException"} and i<REQUEST_RETRIES-1:
                time.sleep(BACKOFF_SECONDS*(2**i)); continue
            raise
        except Exception as e:
            msg = f"{type(e).__name__}: {e}"
            if VERBOSE_ERROR_TRACES: msg += "\n"+traceback.format_exc()
            write_line(errors, f"{utc_now()} | region={region} | service={service} | resource={rtype} | API={api} | ERROR=Unhandled | {msg}")
            if i<REQUEST_RETRIES-1: time.sleep(BACKOFF_SECONDS*(2**i)); continue
            raise

# ---------- output accumulators ----------
HEADERS = ["Region","Service","ResourceType","ARN","ResourceIdOrName","AccountId","APIUsed","Notes","Timestamp"]

class Sink:
    def __init__(self, log_dir: str):
        ensure_dir(log_dir)
        self.attempted = os.path.join(log_dir, "attempted_apis.txt")
        self.errors = os.path.join(log_dir, "errors.txt")
        self.summary = os.path.join(log_dir, "summary_counts.txt")
        for p in (self.attempted, self.errors, self.summary):
            if os.path.exists(p): os.remove(p)
        self.rows: Dict[str, List[List[str]]] = defaultdict(list)
        self.by_service = defaultdict(int)
        self.by_service_type = defaultdict(int)
        self.by_region = defaultdict(int)
        self.total = 0

    def add(self, sheet: str, region: str, service: str, rtype: str, arn: str, rid: str, acct: str, api: str, notes: str):
        row = [region, service, rtype, arn, rid, acct, api, notes, utc_now()]
        self.rows[sheet].append(row)
        if arn:
            self.by_service[service] += 1
            self.by_service_type[(service, rtype)] += 1
            self.by_region[region] += 1
            self.total += 1

def write_excel(path: str, rows_by_sheet: Dict[str, List[List[str]]]):
    wb = Workbook()
    default = wb.active; default.title = "global"
    def write_sheet(name: str, rows: List[List[str]]):
        ws = wb[name] if name in wb.sheetnames else wb.create_sheet(title=name)
        ws.append(HEADERS)
        for r in rows: ws.append(r)
        for ci in range(1, len(HEADERS)+1):
            ws.column_dimensions[get_column_letter(ci)].width = 28
    # global first, then others
    names = ["global"] + sorted([k for k in rows_by_sheet.keys() if k!="global"])
    for n in names: write_sheet(n, rows_by_sheet.get(n, []))
    wb.save(path)

def write_summary(path: str, sink: Sink):
    write_line(path, "[By Service]")
    for svc,cnt in sorted(sink.by_service.items(), key=lambda x:(-x[1],x[0])):
        write_line(path, f"{svc}: {cnt}")
    write_line(path, "\n[By Service → ResourceType]")
    for (svc,rt),cnt in sorted(sink.by_service_type.items(), key=lambda x:(-x[1],x[0][0],x[0][1])):
        write_line(path, f"{svc} → {rt}: {cnt}")
    write_line(path, "\n[By Region]")
    for reg,cnt in sorted(sink.by_region.items(), key=lambda x:(-x[1],x[0])):
        write_line(path, f"{reg}: {cnt}")
    write_line(path, f"\n[Account Total]\nTotal ARNs: {sink.total}")

# ---------- CORE COLLECTORS (broad coverage) ----------

# S3 (global list, per-bucket region placement)
def c_s3(sess, sink: Sink, acct: str, part: str):
    svc="s3"; cli = sess.client("s3", region_name="us-east-1", config=BotoConfig(retries={"max_attempts":3}))
    api="list_buckets"
    try:
        resp = call_boto(cli.list_buckets, sink.attempted, sink.errors, svc, "global", "buckets", api)
    except Exception: return
    for b in resp.get("Buckets", []):
        name = b["Name"]
        reg_api="get_bucket_location"
        try:
            loc = call_boto(cli.get_bucket_location, sink.attempted, sink.errors, svc, "global", "buckets", reg_api, Bucket=name)
            lc = loc.get("LocationConstraint")
            if lc in (None, "EU"): region = "us-east-1" if lc is None else "eu-west-1"
            else: region = lc
        except Exception: region="unknown"
        arn = f"arn:{part}:s3:::{name}"
        sink.add(region if region else "global", region, svc, "bucket", arn, name, acct, f"{api}+{reg_api}", "" if region!="unknown" else "BucketRegionUnknown")

# EC2 core + VPC family
def c_ec2(sess, sink: Sink, acct: str, part: str, region: str):
    cli = sess.client("ec2", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    svc="ec2"
    # instances
    try:
        api="describe_instances"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "instances", api):
            for r in page.get("Reservations", []):
                for it in r.get("Instances", []):
                    iid=it["InstanceId"]; arn=f"arn:{part}:ec2:{region}:{acct}:instance/{iid}"
                    sink.add(region, region, svc, "instance", arn, iid, acct, api, "")
    except Exception: pass
    # volumes
    try:
        api="describe_volumes"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "volumes", api):
            for v in page.get("Volumes", []):
                vid=v["VolumeId"]; arn=f"arn:{part}:ec2:{region}:{acct}:volume/{vid}"
                sink.add(region, region, svc, "volume", arn, vid, acct, api, "")
    except Exception: pass
    # snapshots (owned)
    try:
        api="describe_snapshots"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "snapshots", api, OwnerIds=[acct]):
            for s in page.get("Snapshots", []):
                sid=s["SnapshotId"]; arn=f"arn:{part}:ec2:{region}:{acct}:snapshot/{sid}"
                sink.add(region, region, svc, "snapshot", arn, sid, acct, api, "")
    except Exception: pass
    # security groups
    try:
        api="describe_security_groups"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, "vpc", region, "security-groups", api):
            for sg in page.get("SecurityGroups", []):
                sgid=sg["GroupId"]; arn=f"arn:{part}:ec2:{region}:{acct}:security-group/{sgid}"
                sink.add(region, region, "vpc", "security-group", arn, sgid, acct, api, "")
    except Exception: pass
    # vpc, subnets, route tables, igw, nat, endpoints
    def add(api,key,rt,id_field, arn_fmt):
        try:
            pg=cli.get_paginator(api)
            for page in call_boto(pg.paginate, sink.attempted, sink.errors, "vpc", region, rt, api):
                for it in page.get(key, []):
                    rid=it[id_field]; arn=arn_fmt.format(part=part,reg=region,acct=acct,id=rid)
                    sink.add(region, region, "vpc", rt, arn, rid, acct, api, "")
        except Exception: pass
    add("describe_vpcs","Vpcs","vpc","VpcId","arn:{part}:ec2:{reg}:{acct}:vpc/{id}")
    add("describe_subnets","Subnets","subnet","SubnetId","arn:{part}:ec2:{reg}:{acct}:subnet/{id}")
    add("describe_route_tables","RouteTables","route-table","RouteTableId","arn:{part}:ec2:{reg}:{acct}:route-table/{id}")
    add("describe_internet_gateways","InternetGateways","internet-gateway","InternetGatewayId","arn:{part}:ec2:{reg}:{acct}:internet-gateway/{id}")
    add("describe_nat_gateways","NatGateways","nat-gateway","NatGatewayId","arn:{part}:ec2:{reg}:{acct}:natgateway/{id}")
    add("describe_vpc_endpoints","VpcEndpoints","vpc-endpoint","VpcEndpointId","arn:{part}:ec2:{reg}:{acct}:vpc-endpoint/{id}")

# ECR
def c_ecr(sess,sink,acct,part,region):
    svc="ecr"; cli=sess.client("ecr", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_repositories"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "repositories", api):
            for r in page.get("repositories", []):
                arn=r.get("repositoryArn",""); name=r.get("repositoryName","")
                sink.add(region, region, svc, "repository", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

# ECS
def c_ecs(sess,sink,acct,part,region):
    svc="ecs"; cli=sess.client("ecs", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    # clusters
    try:
        api="list_clusters"
        arns = call_boto(cli.list_clusters, sink.attempted, sink.errors, svc, region, "clusters", api).get("clusterArns", [])
        for arn in arns: sink.add(region, region, svc, "cluster", arn, arn.split("/")[-1], acct, api, "")
    except Exception: pass
    # services
    try:
        clusters = call_boto(cli.list_clusters, sink.attempted, sink.errors, svc, region, "clusters", "list_clusters").get("clusterArns", [])
        for c in clusters:
            api="list_services"
            s_arns = call_boto(cli.list_services, sink.attempted, sink.errors, svc, region, "services", api, cluster=c).get("serviceArns", [])
            for sarn in s_arns:
                sink.add(region, region, svc, "service", sarn, sarn.split("/")[-1], acct, api, "")
    except Exception: pass
    # task definitions (global-ish per region)
    try:
        api="list_task_definitions"
        t_arns = call_boto(cli.list_task_definitions, sink.attempted, sink.errors, svc, region, "task-definitions", api).get("taskDefinitionArns", [])
        for tarn in t_arns: sink.add(region, region, svc, "task-definition", tarn, tarn.split("/")[-1], acct, api, "")
    except Exception: pass

# EKS
def c_eks(sess,sink,acct,part,region):
    svc="eks"; cli=sess.client("eks", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_clusters"
        names = call_boto(cli.list_clusters, sink.attempted, sink.errors, svc, region, "clusters", api).get("clusters", [])
        for name in names:
            d=call_boto(cli.describe_cluster, sink.attempted, sink.errors, svc, region, "clusters", "describe_cluster", name=name)
            arn=safe_get(d,"cluster",{}).get("arn","")
            sink.add(region, region, svc, "cluster", arn, name, acct, "describe_cluster", "" if arn else "NotDerivable")
            # nodegroups
            try:
                ngs = call_boto(cli.list_nodegroups, sink.attempted, sink.errors, svc, region, "nodegroups", "list_nodegroups", clusterName=name).get("nodegroups", [])
                for ng in ngs:
                    nd = call_boto(cli.describe_nodegroup, sink.attempted, sink.errors, svc, region, "nodegroups", "describe_nodegroup", clusterName=name, nodegroupName=ng)
                    narn = safe_get(nd,"nodegroup",{}).get("nodegroupArn","")
                    sink.add(region, region, svc, "nodegroup", narn, ng, acct, "describe_nodegroup", "" if narn else "NotDerivable")
            except Exception: pass
    except Exception: pass

# Lambda
def c_lambda(sess,sink,acct,part,region):
    svc="lambda"; cli=sess.client("lambda", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_functions"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "functions", api):
            for fn in page.get("Functions", []):
                arn=fn.get("FunctionArn",""); name=fn.get("FunctionName","")
                sink.add(region, region, svc, "function", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass
    # layers (optional)
    try:
        api="list_layers"
        resp = call_boto(cli.list_layers, sink.attempted, sink.errors, svc, region, "layers", api)
        for L in resp.get("Layers", []) or []:
            lname=L.get("LayerName","")
            vers = call_boto(cli.list_layer_versions, sink.attempted, sink.errors, svc, region, "layers", "list_layer_versions", LayerName=lname)
            for v in vers.get("LayerVersions", []) or []:
                larn=v.get("LayerVersionArn","")
                sink.add(region, region, svc, "layer-version", larn, lname, acct, "list_layer_versions", "" if larn else "NotDerivable")
    except Exception: pass

# RDS
def c_rds(sess,sink,acct,part,region):
    svc="rds"; cli=sess.client("rds", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_db_instances"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "db-instances", api):
            for db in page.get("DBInstances", []):
                arn=db.get("DBInstanceArn",""); name=db.get("DBInstanceIdentifier","")
                sink.add(region, region, svc, "db-instance", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass
    try:
        api="describe_db_clusters"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "db-clusters", api):
            for c in page.get("DBClusters", []):
                arn=c.get("DBClusterArn",""); name=c.get("DBClusterIdentifier","")
                sink.add(region, region, svc, "db-cluster", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

# Redshift
def c_redshift(sess,sink,acct,part,region):
    svc="redshift"; cli=sess.client("redshift", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_clusters"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "clusters", api):
            for c in page.get("Clusters", []):
                arn = c.get("ClusterNamespaceArn") or f"arn:{part}:redshift:{region}:{acct}:cluster:{c.get('ClusterIdentifier','')}"
                name=c.get("ClusterIdentifier","")
                sink.add(region, region, svc, "cluster", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

# CloudTrail
def c_cloudtrail(sess,sink,acct,part,region):
    svc="cloudtrail"; cli=sess.client("cloudtrail", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_trails"
        resp = call_boto(cli.list_trails, sink.attempted, sink.errors, svc, region, "trails", api)
        for t in resp.get("Trails", []):
            arn=t.get("TrailARN",""); name=t.get("Name","")
            sink.add(region, region, svc, "trail", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

# CloudFormation
def c_cfn(sess,sink,acct,part,region):
    svc="cloudformation"; cli=sess.client("cloudformation", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_stacks"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "stacks", api, StackStatusFilter=[
            "CREATE_COMPLETE","UPDATE_COMPLETE","UPDATE_ROLLBACK_COMPLETE","IMPORT_COMPLETE","ROLLBACK_COMPLETE"
        ]):
            for s in page.get("StackSummaries", []):
                sid=s.get("StackId",""); name=s.get("StackName",""); arn=sid if sid.startswith("arn:") else ""
                sink.add(region, region, svc, "stack", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

# CloudWatch + Logs
def c_cloudwatch(sess,sink,acct,part,region):
    svc="cloudwatch"; cli=sess.client("cloudwatch", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_alarms"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "alarms", api):
            for a in page.get("MetricAlarms", []):
                arn=a.get("AlarmArn",""); name=a.get("AlarmName","")
                sink.add(region, region, svc, "alarm", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_logs(sess,sink,acct,part,region):
    svc="logs"; cli=sess.client("logs", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_log_groups"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "log-groups", api):
            for g in page.get("logGroups", []):
                arn=g.get("arn",""); name=g.get("logGroupName","")
                sink.add(region, region, svc, "log-group", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

# KMS + Secrets + SNS + SQS
def c_kms(sess,sink,acct,part,region):
    svc="kms"; cli=sess.client("kms", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_keys"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "keys", api):
            for k in page.get("Keys", []):
                kid=k.get("KeyId")
                d=call_boto(cli.describe_key, sink.attempted, sink.errors, svc, region, "keys", "describe_key", KeyId=kid)
                arn=safe_get(d,"KeyMetadata",{}).get("Arn","")
                sink.add(region, region, svc, "key", arn, kid, acct, "describe_key", "" if arn else "NotDerivable")
    except Exception: pass
    try:
        api="list_aliases"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "aliases", api):
            for a in page.get("Aliases", []):
                arn=a.get("AliasArn",""); name=a.get("AliasName","")
                sink.add(region, region, svc, "alias", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_secrets(sess,sink,acct,part,region):
    svc="secretsmanager"; cli=sess.client("secretsmanager", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_secrets"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "secrets", api):
            for s in page.get("SecretList", []):
                arn=s.get("ARN",""); name=s.get("Name","")
                sink.add(region, region, svc, "secret", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_sns(sess,sink,acct,part,region):
    svc="sns"; cli=sess.client("sns", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_topics"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "topics", api):
            for t in page.get("Topics", []):
                arn=t.get("TopicArn",""); sink.add(region, region, svc, "topic", arn, arn.split(":")[-1], acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_sqs(sess,sink,acct,part,region):
    svc="sqs"; cli=sess.client("sqs", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_queues"
        resp = call_boto(cli.list_queues, sink.attempted, sink.errors, svc, region, "queues", api)
        for url in resp.get("QueueUrls", []) or []:
            attrs = call_boto(cli.get_queue_attributes, sink.attempted, sink.errors, svc, region, "queues", "get_queue_attributes", QueueUrl=url, AttributeNames=["QueueArn"])
            arn=safe_get(attrs,"Attributes",{}).get("QueueArn",""); name=url.rsplit("/",1)[-1]
            sink.add(region, region, svc, "queue", arn, name, acct, f"{api}+get_queue_attributes", "" if arn else "NotDerivable")
    except Exception: pass

# EFS / FSx
def c_efs(sess,sink,acct,part,region):
    svc="efs"; cli=sess.client("efs", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_file_systems"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "file-systems", api):
            for fs in page.get("FileSystems", []):
                arn=fs.get("FileSystemArn",""); fid=fs.get("FileSystemId","")
                sink.add(region, region, svc, "file-system", arn, fid, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_fsx(sess,sink,acct,part,region):
    svc="fsx"; cli=sess.client("fsx", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_file_systems"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "file-systems", api):
            for fs in page.get("FileSystems", []):
                arn=fs.get("ResourceARN",""); name=fs.get("FileSystemId","")
                sink.add(region, region, svc, "file-system", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

# ELB (classic) + ELBv2
def c_elb(sess,sink,acct,part,region):
    svc="elb"; cli=sess.client("elb", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_load_balancers"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "load-balancers", api):
            for lb in page.get("LoadBalancerDescriptions", []):
                name=lb.get("LoadBalancerName","")
                arn=f"arn:{part}:elasticloadbalancing:{region}:{acct}:loadbalancer/{name}"
                sink.add(region, region, svc, "load-balancer", arn, name, acct, api, "")
    except Exception: pass

def c_elbv2(sess,sink,acct,part,region):
    svc="elbv2"; cli=sess.client("elbv2", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_load_balancers"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "load-balancers", api):
            for lb in page.get("LoadBalancers", []):
                arn=lb.get("LoadBalancerArn",""); name=lb.get("LoadBalancerName","")
                sink.add(region, region, svc, "load-balancer", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

# API Gateway v1 & v2
def c_apigw(sess,sink,acct,part,region):
    svc="apigateway"; cli=sess.client("apigateway", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="get_rest_apis"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "rest-apis", api):
            for it in page.get("items", []):
                api_id=it.get("id",""); arn=f"arn:{part}:apigateway:{region}::/restapis/{api_id}"
                sink.add(region, region, svc, "rest-api", arn, it.get("name",api_id), acct, api, "")
    except Exception: pass

def c_apigw2(sess,sink,acct,part,region):
    svc="apigatewayv2"; cli=sess.client("apigatewayv2", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="get_apis"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "apis", api):
            for it in page.get("Items", []):
                api_id=it.get("ApiId",""); arn=f"arn:{part}:apigateway:{region}::/apis/{api_id}"
                sink.add(region, region, svc, "api", arn, it.get("Name",api_id), acct, api, "")
    except Exception: pass

# Glue (crawlers + jobs + databases)
def c_glue(sess,sink,acct,part,region):
    svc="glue"; cli=sess.client("glue", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="get_crawlers"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "crawlers", api):
            for c in page.get("Crawlers", []):
                arn=c.get("CrawlerArn",""); name=c.get("Name","")
                sink.add(region, region, svc, "crawler", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass
    try:
        api="get_jobs"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "jobs", api):
            for j in page.get("Jobs", []):
                arn=j.get("Arn",""); name=j.get("Name","")
                sink.add(region, region, svc, "job", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass
    # databases (derive)
    try:
        api="get_databases"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "databases", api):
            for d in page.get("DatabaseList", []):
                name=d.get("Name","")
                arn = f"arn:{part}:glue:{region}:{acct}:database/{name}" if name else ""
                sink.add(region, region, svc, "database", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

# GuardDuty + Security Hub + EventBridge + WAFv2
def c_guardduty(sess,sink,acct,part,region):
    svc="guardduty"; cli=sess.client("guardduty", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_detectors"
        dets = call_boto(cli.list_detectors, sink.attempted, sink.errors, svc, region, "detectors", api).get("DetectorIds", [])
        for d in dets:
            arn=f"arn:{part}:guardduty:{region}:{acct}:detector/{d}"
            sink.add(region, region, svc, "detector", arn, d, acct, api, "")
    except Exception: pass

def c_securityhub(sess,sink,acct,part,region):
    svc="securityhub"; cli=sess.client("securityhub", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_hub"
        h = call_boto(cli.describe_hub, sink.attempted, sink.errors, svc, region, "hub", api)
        arn=h.get("HubArn","")
        if arn: sink.add(region, region, svc, "hub", arn, arn.split(":")[-1], acct, api, "")
    except botocore.exceptions.ClientError: pass
    except Exception: pass

def c_events(sess,sink,acct,part,region):
    svc="eventbridge"; cli=sess.client("events", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_event_buses"
        resp = call_boto(cli.list_event_buses, sink.attempted, sink.errors, svc, region, "event-buses", api)
        for b in resp.get("EventBuses", []):
            arn=b.get("Arn",""); name=b.get("Name","")
            sink.add(region, region, svc, "event-bus", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass
    try:
        api="list_rules"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "rules", api):
            for r in page.get("Rules", []):
                arn=r.get("Arn",""); name=r.get("Name","")
                sink.add(region, region, svc, "rule", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_wafv2(sess,sink,acct,part,region):
    svc="wafv2"; cli=sess.client("wafv2", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    # regional scope
    try:
        api="list_web_acls"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "web-acls", api, Scope="REGIONAL"):
            for it in page.get("WebACLs", []):
                arn=it.get("ARN",""); name=it.get("Name","")
                sink.add(region, region, svc, "web-acl", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass
    # CLOUDFRONT (global)
    try:
        api="list_web_acls"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, "global", "web-acls", api, Scope="CLOUDFRONT"):
            for it in page.get("WebACLs", []):
                arn=it.get("ARN",""); name=it.get("Name","")
                sink.add("global", "global", svc, "web-acl", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

# CloudFront (global)
def c_cloudfront_global(sess,sink,acct,part):
    svc="cloudfront"; cli=sess.client("cloudfront", region_name=GLOBAL_SERVICES["cloudfront"], config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_distributions"
        resp = call_boto(cli.list_distributions, sink.attempted, sink.errors, svc, "global", "distributions", api)
        for it in (safe_get(resp,"DistributionList",{}).get("Items",[]) or []):
            arn=it.get("ARN",""); id_=it.get("Id","")
            sink.add("global", "global", svc, "distribution", arn, id_, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

# Route53 (global) — zones + record count
def c_route53_global(sess,sink,acct,part):
    svc="route53"; cli=sess.client("route53", region_name=GLOBAL_SERVICES["route53"], config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_hosted_zones"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, "global", "hosted-zones", api):
            for z in page.get("HostedZones", []):
                zid=z.get("Id","").split("/")[-1]; name=z.get("Name","")
                arn=f"arn:{part}:route53:::hostedzone/{zid}" if zid else ""
                # record count
                rc_api="list_resource_record_sets"; count=0
                try:
                    rc_pg=cli.get_paginator(rc_api)
                    for rr in call_boto(rc_pg.paginate, sink.attempted, sink.errors, svc, "global", "rrsets", rc_api, HostedZoneId=zid):
                        count += len(rr.get("ResourceRecordSets", []))
                except Exception: pass
                note=f"RecordCount={count}" if count else ""
                sink.add("global","global",svc,"hosted-zone",arn,name or zid,acct,f"{api}+{rc_api}", "" if arn else ("NotDerivable"+(f"; {note}" if note else "")))
    except Exception: pass

# IAM (global)
def c_iam_global(sess,sink,acct,part):
    svc="iam"; cli=sess.client("iam", region_name=GLOBAL_SERVICES["iam"], config=BotoConfig(retries={"max_attempts":3}))
    def add(api,key,rtype,arn_field,id_field):
        try:
            pg=cli.get_paginator(api)
            for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, "global", rtype, api):
                for it in page.get(key, []):
                    arn=it.get(arn_field,""); rid=it.get(id_field,"")
                    sink.add("global","global",svc,rtype,arn,rid,acct,api,"" if arn else "NotDerivable")
        except Exception: pass
    add("list_users","Users","user","Arn","UserName")
    add("list_roles","Roles","role","Arn","RoleName")
    add("list_groups","Groups","group","Arn","GroupName")
    add("list_policies","Policies","policy","Arn","PolicyName")

# ------------ The rest of requested services (new) ------------
def c_accessanalyzer(sess,sink,acct,part,region):
    svc="accessanalyzer"; cli=sess.client("accessanalyzer", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_analyzers"; resp=call_boto(cli.list_analyzers, sink.attempted, sink.errors, svc, region, "analyzers", api)
        for a in resp.get("analyzers", []):
            arn=a.get("arn",""); name=a.get("name","")
            sink.add(region, region, svc, "analyzer", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_acm(sess,sink,acct,part,region):
    svc="acm"; cli=sess.client("acm", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_certificates"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "certificates", api):
            for c in page.get("CertificateSummaryList", []):
                arn=c.get("CertificateArn",""); name=c.get("DomainName","") or arn.split("/")[-1]
                sink.add(region, region, svc, "certificate", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_appconfig(sess,sink,acct,part,region):
    svc="appconfig"; cli=sess.client("appconfig", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    # applications
    try:
        api="list_applications"; pg=cli.get_paginator(api)
        apps=[]
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "applications", api):
            for a in page.get("Items", []):
                aid=a.get("Id",""); name=a.get("Name","")
                arn=f"arn:{part}:appconfig:{region}:{acct}:application/{aid}" if aid else ""
                sink.add(region, region, svc, "application", arn, name or aid, acct, api, "" if arn else "NotDerivable")
                apps.append(aid)
        # environments per app
        for aid in apps:
            try:
                env_api="list_environments"; epg=cli.get_paginator(env_api)
                for page in call_boto(epg.paginate, sink.attempted, sink.errors, svc, region, "environments", env_api, ApplicationId=aid):
                    for e in page.get("Items", []):
                        eid=e.get("Id",""); en=e.get("Name","")
                        e_arn = f"arn:{part}:appconfig:{region}:{acct}:application/{aid}/environment/{eid}" if aid and eid else ""
                        sink.add(region, region, svc, "environment", e_arn, en or eid, acct, env_api, "" if e_arn else "NotDerivable")
            except Exception: pass
    except Exception: pass

def c_appstream(sess,sink,acct,part,region):
    svc="appstream"; cli=sess.client("appstream", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_stacks"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "stacks", api):
            for st in page.get("Stacks", []):
                arn=st.get("Arn",""); name=st.get("Name","")
                sink.add(region, region, svc, "stack", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass
    try:
        api="describe_fleets"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "fleets", api):
            for fl in page.get("Fleets", []):
                arn=fl.get("Arn",""); name=fl.get("Name","")
                sink.add(region, region, svc, "fleet", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_appsync(sess,sink,acct,part,region):
    svc="appsync"; cli=sess.client("appsync", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_graphql_apis"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "graphql-apis", api):
            for g in page.get("graphqlApis", []):
                arn=g.get("arn",""); name=g.get("name","")
                sink.add(region, region, svc, "graphql-api", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_athena(sess,sink,acct,part,region):
    svc="athena"; cli=sess.client("athena", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_work_groups"; resp=call_boto(cli.list_work_groups, sink.attempted, sink.errors, svc, region, "workgroups", api)
        for wg in resp.get("WorkGroups", []):
            name=wg.get("Name",""); arn=f"arn:{part}:athena:{region}:{acct}:workgroup/{name}" if name else ""
            sink.add(region, region, svc, "workgroup", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_auditmanager(sess,sink,acct,part,region):
    svc="auditmanager"; cli=sess.client("auditmanager", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_assessments"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "assessments", api):
            for a in page.get("assessmentMetadata", []):
                arn=a.get("arn",""); name=a.get("name","")
                sink.add(region, region, svc, "assessment", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_autoscaling(sess,sink,acct,part,region):
    svc="autoscaling"; cli=sess.client("autoscaling", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_auto_scaling_groups"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "auto-scaling-groups", api):
            for g in page.get("AutoScalingGroups", []):
                arn=g.get("AutoScalingGroupARN",""); name=g.get("AutoScalingGroupName","")
                sink.add(region, region, svc, "auto-scaling-group", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_backup(sess,sink,acct,part,region):
    svc="backup"; cli=sess.client("backup", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_backup_vaults"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "backup-vaults", api):
            for v in page.get("BackupVaultList", []):
                arn=v.get("BackupVaultArn",""); name=v.get("BackupVaultName","")
                sink.add(region, region, svc, "backup-vault", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_batch(sess,sink,acct,part,region):
    svc="batch"; cli=sess.client("batch", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_job_queues"; resp=call_boto(cli.describe_job_queues, sink.attempted, sink.errors, svc, region, "job-queues", api)
        for q in resp.get("jobQueues", []):
            arn=q.get("jobQueueArn",""); name=q.get("jobQueueName","")
            sink.add(region, region, svc, "job-queue", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass
    try:
        api="describe_compute_environments"; resp=call_boto(cli.describe_compute_environments, sink.attempted, sink.errors, svc, region, "compute-envs", api)
        for ce in resp.get("computeEnvironments", []):
            arn=ce.get("computeEnvironmentArn",""); name=ce.get("computeEnvironmentName","")
            sink.add(region, region, svc, "compute-environment", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass
    try:
        api="describe_job_definitions"; resp=call_boto(cli.describe_job_definitions, sink.attempted, sink.errors, svc, region, "job-definitions", api)
        for jd in resp.get("jobDefinitions", []):
            arn=jd.get("jobDefinitionArn",""); name=jd.get("jobDefinitionName","")
            sink.add(region, region, svc, "job-definition", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_bedrock(sess,sink,acct,part,region):
    # Agents & KBs (bedrock-agent)
    svc="bedrock"; 
    try:
        cli=sess.client("bedrock-agent", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
        api="list_agents"
        resp=call_boto(cli.list_agents, sink.attempted, sink.errors, svc, region, "agents", api)
        for ag in resp.get("agentSummaries", []):
            arn=ag.get("agentArn",""); name=ag.get("agentName","")
            sink.add(region, region, svc, "agent", arn, name, acct, api, "" if arn else "NotDerivable")
        kb = call_boto(cli.list_knowledge_bases, sink.attempted, sink.errors, svc, region, "knowledge-bases", "list_knowledge_bases")
        for k in kb.get("knowledgeBaseSummaries", []):
            arn=k.get("knowledgeBaseArn",""); name=k.get("name","")
            sink.add(region, region, svc, "knowledge-base", arn, name, acct, "list_knowledge_bases", "" if arn else "NotDerivable")
    except Exception: pass

def c_budgets_global(sess,sink,acct,part):
    svc="budgets"; cli=sess.client("budgets", region_name=GLOBAL_SERVICES["budgets"], config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_budgets"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, "global", "budgets", api, AccountId=acct):
            for b in page.get("Budgets", []):
                name=b.get("BudgetName","")
                arn=f"arn:{part}:budgets::{acct}:budget/{name}" if name else ""
                sink.add("global","global",svc,"budget",arn,name,acct,api,"" if arn else "NotDerivable")
    except Exception: pass

def c_cognito(sess,sink,acct,part,region):
    # user pools
    try:
        svc="cognito-idp"; cli=sess.client("cognito-idp", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
        api="list_user_pools"; resp=call_boto(cli.list_user_pools, sink.attempted, sink.errors, "cognito", region, "user-pools", api, MaxResults=60)
        for up in resp.get("UserPools", []):
            pid=up.get("Id",""); name=up.get("Name","")
            d = call_boto(cli.describe_user_pool, sink.attempted, sink.errors, "cognito", region, "user-pools", "describe_user_pool", UserPoolId=pid)
            arn=safe_get(d,"UserPool",{}).get("Arn","")
            sink.add(region, region, "cognito", "user-pool", arn, name or pid, acct, "describe_user_pool", "" if arn else "NotDerivable")
    except Exception: pass
    # identity pools
    try:
        cli=sess.client("cognito-identity", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
        api="list_identity_pools"; resp=call_boto(cli.list_identity_pools, sink.attempted, sink.errors, "cognito", region, "identity-pools", api, MaxResults=60)
        for ip in resp.get("IdentityPools", []):
            pid=ip.get("IdentityPoolId",""); name=ip.get("IdentityPoolName","")
            arn=f"arn:{part}:cognito-identity:{region}:{acct}:identitypool/{pid}" if pid else ""
            sink.add(region, region, "cognito", "identity-pool", arn, name or pid, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_config(sess,sink,acct,part,region):
    svc="config"; cli=sess.client("config", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_config_rules"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "config-rules", api):
            for r in page.get("ConfigRules", []):
                arn=r.get("ConfigRuleArn",""); name=r.get("ConfigRuleName","")
                sink.add(region, region, svc, "config-rule", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_detective(sess,sink,acct,part,region):
    svc="detective"; cli=sess.client("detective", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_graphs"; resp=call_boto(cli.list_graphs, sink.attempted, sink.errors, svc, region, "graphs", api)
        for g in resp.get("GraphList", []):
            arn=g.get("Arn") or g.get("GraphArn",""); name=(g.get("Arn") or "").split("/")[-1]
            sink.add(region, region, svc, "graph", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_directconnect(sess,sink,acct,part,region):
    svc="directconnect"; cli=sess.client("directconnect", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_connections"; resp=call_boto(cli.describe_connections, sink.attempted, sink.errors, svc, region, "connections", api)
        for c in resp.get("connections", []):
            cid=c.get("connectionId",""); # ARN may not be returned; mark NotDerivable
            sink.add(region, region, svc, "connection", "", cid, acct, api, "NotDerivable")
    except Exception: pass

def c_directoryservice(sess,sink,acct,part,region):
    svc="directoryservice"; cli=sess.client("ds", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_directories"; resp=call_boto(cli.describe_directories, sink.attempted, sink.errors, svc, region, "directories", api)
        for d in resp.get("DirectoryDescriptions", []):
            did=d.get("DirectoryId",""); name=d.get("Name","")
            arn=f"arn:{part}:ds:{region}:{acct}:directory/{did}" if did else ""
            sink.add(region, region, svc, "directory", arn, name or did, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_datasync(sess,sink,acct,part,region):
    svc="datasync"; cli=sess.client("datasync", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    for spec in [("list_agents","Agents","agent","Arn","Name"),
                 ("list_locations","Locations","location","LocationArn","LocationUri"),
                 ("list_tasks","Tasks","task","TaskArn","Name")]:
        try:
            api,key,rtype,arn_f,id_f = spec
            pg=cli.get_paginator(api)
            for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, rtype, api):
                for it in page.get(key, []):
                    arn=it.get(arn_f,""); rid=it.get(id_f,"")
                    sink.add(region, region, svc, rtype, arn, rid, acct, api, "" if arn else "NotDerivable")
        except Exception: pass

def c_dlm(sess,sink,acct,part,region):
    svc="dlm"; cli=sess.client("dlm", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="get_lifecycle_policies"; resp=call_boto(cli.get_lifecycle_policies, sink.attempted, sink.errors, svc, region, "policies", api)
        for p in resp.get("Policies", []):
            pid=p.get("PolicyId",""); arn=f"arn:{part}:dlm:{region}:{acct}:policy/{pid}" if pid else ""
            sink.add(region, region, svc, "policy", arn, pid, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_dms(sess,sink,acct,part,region):
    svc="dms"; cli=sess.client("dms", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    for api,rtype,key,arnk,idk in [
        ("describe_replication_instances","replication-instances","ReplicationInstances","ReplicationInstanceArn","ReplicationInstanceIdentifier"),
        ("describe_endpoints","endpoints","Endpoints","EndpointArn","EndpointIdentifier"),
        ("describe_replication_tasks","replication-tasks","ReplicationTasks","ReplicationTaskArn","ReplicationTaskIdentifier")
    ]:
        try:
            resp = call_boto(getattr(cli, api), sink.attempted, sink.errors, svc, region, rtype, api)
            for it in resp.get(key, []):
                arn=it.get(arnk,""); rid=it.get(idk,"")
                sink.add(region, region, svc, rtype, arn, rid, acct, api, "" if arn else "NotDerivable")
        except Exception: pass

def c_drs(sess,sink,acct,part,region):
    svc="drs"; cli=sess.client("drs", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_source_servers"
        resp=call_boto(cli.describe_source_servers, sink.attempted, sink.errors, svc, region, "source-servers", api)
        for s in resp.get("items", []):
            arn = s.get("arn") or s.get("sourceServerID") or ""
            # Often only sourceServerID; if arn missing, mark NotDerivable
            is_arn = str(arn).startswith("arn:")
            sink.add(region, region, svc, "source-server", arn if is_arn else "", s.get("sourceServerID",""), acct, api, "" if is_arn else "NotDerivable")
    except Exception: pass
    try:
        api="list_replication_configuration_templates"
        resp=call_boto(cli.list_replication_configuration_templates, sink.attempted, sink.errors, svc, region, "replication-config-templates", api)
        for t in resp.get("items", []):
            arn=t.get("arn",""); name=t.get("stagingAreaSubnetId","") or t.get("arn","").split("/")[-1]
            sink.add(region, region, svc, "replication-config-template", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_dynamodb(sess,sink,acct,part,region):
    svc="dynamodb"; cli=sess.client("dynamodb", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_tables"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "tables", api):
            for name in page.get("TableNames", []):
                d=call_boto(cli.describe_table, sink.attempted, sink.errors, svc, region, "tables", "describe_table", TableName=name)
                arn=safe_get(d,"Table",{}).get("TableArn","")
                sink.add(region, region, svc, "table", arn, name, acct, "describe_table", "" if arn else "NotDerivable")
    except Exception: pass

def c_elasticache(sess,sink,acct,part,region):
    svc="elasticache"; cli=sess.client("elasticache", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_replication_groups"; resp=call_boto(cli.describe_replication_groups, sink.attempted, sink.errors, svc, region, "replication-groups", api)
        for g in resp.get("ReplicationGroups", []):
            rid=g.get("ReplicationGroupId",""); arn=g.get("ARN") or f"arn:{part}:elasticache:{region}:{acct}:replicationgroup:{rid}" if rid else ""
            sink.add(region, region, svc, "replication-group", arn, rid, acct, api, "" if arn else "NotDerivable")
    except Exception: pass
    try:
        api="describe_cache_clusters"; resp=call_boto(cli.describe_cache_clusters, sink.attempted, sink.errors, svc, region, "cache-clusters", api)
        for c in resp.get("CacheClusters", []):
            cid=c.get("CacheClusterId",""); arn=c.get("ARN") or f"arn:{part}:elasticache:{region}:{acct}:cluster:{cid}" if cid else ""
            sink.add(region, region, svc, "cache-cluster", arn, cid, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_fms(sess,sink,acct,part,region):
    svc="fms"; cli=sess.client("fms", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_policies"; resp=call_boto(cli.list_policies, sink.attempted, sink.errors, svc, region, "policies", api)
        for p in resp.get("PolicyList", []):
            arn=p.get("PolicyArn",""); name=p.get("PolicyName","")
            sink.add(region, region, svc, "policy", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_inspector(sess,sink,acct,part,region):
    svc="inspector"; cli=sess.client("inspector", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_assessment_templates"
        resp = call_boto(cli.list_assessment_templates, sink.attempted, sink.errors, svc, region, "assessment-templates", api)
        for a in resp.get("assessmentTemplateArns", []):
            sink.add(region, region, svc, "assessment-template", a, a.split("/")[-1], acct, api, "")
    except Exception: pass

def c_inspector2(sess,sink,acct,part,region):
    svc="inspector2"; cli=sess.client("inspector2", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_filters"; resp=call_boto(cli.list_filters, sink.attempted, sink.errors, svc, region, "filters", api)
        for f in resp.get("filters", []):
            arn=f.get("arn",""); name=f.get("name","")
            sink.add(region, region, svc, "filter", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_kafka(sess,sink,acct,part,region):
    svc="kafka"; cli=sess.client("kafka", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_clusters_v2"; resp=call_boto(cli.list_clusters_v2, sink.attempted, sink.errors, svc, region, "clusters", api)
        for c in resp.get("ClusterInfoList", []):
            arn=c.get("ClusterArn",""); name=c.get("ClusterName","")
            sink.add(region, region, svc, "cluster", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_kinesis(sess,sink,acct,part,region):
    svc="kinesis"; cli=sess.client("kinesis", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_streams"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "streams", api):
            for name in page.get("StreamNames", []):
                d=call_boto(cli.describe_stream_summary, sink.attempted, sink.errors, svc, region, "streams", "describe_stream_summary", StreamName=name)
                arn=safe_get(d,"StreamDescriptionSummary",{}).get("StreamARN","")
                sink.add(region, region, svc, "stream", arn, name, acct, "describe_stream_summary", "" if arn else "NotDerivable")
    except Exception: pass

def c_lightsail(sess,sink,acct,part,region):
    svc="lightsail"; cli=sess.client("lightsail", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="get_instances"; resp=call_boto(cli.get_instances, sink.attempted, sink.errors, svc, region, "instances", api)
        for i in resp.get("instances", []):
            arn=i.get("arn",""); name=i.get("name","")
            sink.add(region, region, svc, "instance", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_macie(sess,sink,acct,part,region):
    svc="macie"; cli=sess.client("macie2", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="get_macie_session"; resp=call_boto(cli.get_macie_session, sink.attempted, sink.errors, svc, region, "session", api)
        status=resp.get("status","UNKNOWN")
        sink.add(region, region, svc, "session", "", status, acct, api, "NotDerivable")
    except Exception: pass

def c_mq(sess,sink,acct,part,region):
    svc="mq"; cli=sess.client("mq", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_brokers"; resp=call_boto(cli.list_brokers, sink.attempted, sink.errors, svc, region, "brokers", api)
        for b in resp.get("BrokerSummaries", []):
            arn=b.get("BrokerArn",""); name=b.get("BrokerName","")
            sink.add(region, region, svc, "broker", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_neptune(sess,sink,acct,part,region):
    svc="neptune"; cli=sess.client("neptune", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_db_clusters"; resp=call_boto(cli.describe_db_clusters, sink.attempted, sink.errors, svc, region, "db-clusters", api)
        for c in resp.get("DBClusters", []):
            arn=c.get("DBClusterArn",""); name=c.get("DBClusterIdentifier","")
            sink.add(region, region, svc, "db-cluster", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_networkfirewall(sess,sink,acct,part,region):
    svc="networkfirewall"; cli=sess.client("networkfirewall", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_firewalls"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "firewalls", api):
            for f in page.get("Firewalls", []):
                arn=f.get("FirewallArn",""); name=f.get("FirewallName","")
                sink.add(region, region, svc, "firewall", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_opensearch(sess,sink,acct,part,region):
    svc="opensearch"; cli=sess.client("opensearch", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_domain_names"; resp=call_boto(cli.list_domain_names, sink.attempted, sink.errors, svc, region, "domains", api)
        for d in resp.get("DomainNames", []):
            name=d.get("DomainName")
            desc=call_boto(cli.describe_domain, sink.attempted, sink.errors, svc, region, "domains", "describe_domain", DomainName=name)
            arn=safe_get(desc,"DomainStatus",{}).get("ARN","")
            sink.add(region, region, svc, "domain", arn, name, acct, "describe_domain", "" if arn else "NotDerivable")
    except Exception: pass

def c_ram(sess,sink,acct,part,region):
    svc="ram"; cli=sess.client("ram", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_resource_shares"
        resp=call_boto(cli.list_resource_shares, sink.attempted, sink.errors, svc, region, "resource-shares", api, resourceOwner="SELF")
        for rs in resp.get("resourceShares", []):
            arn=rs.get("resourceShareArn",""); name=rs.get("name","")
            sink.add(region, region, svc, "resource-share", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass
    try:
        api="list_resources"
        resp=call_boto(cli.list_resources, sink.attempted, sink.errors, svc, region, "resources", api, resourceOwner="SELF")
        for r in resp.get("resources", []):
            arn=r.get("arn",""); name=arn.split(":")[-1] if arn else ""
            sink.add(region, region, svc, "shared-resource", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_resourceexplorer2(sess,sink,acct,part,region):
    svc="resourceexplorer2"; cli=sess.client("resource-explorer-2", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_views"; resp=call_boto(cli.list_views, sink.attempted, sink.errors, svc, region, "views", api)
        for v in resp.get("Views", []):
            arn=v.get("ViewArn",""); name=v.get("Name","")
            sink.add(region, region, svc, "view", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_route53resolver(sess,sink,acct,part,region):
    svc="route53resolver"; cli=sess.client("route53resolver", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    for spec in [("list_resolver_endpoints","ResolverEndpoints","resolver-endpoint","Arn","Name"),
                 ("list_resolver_rules","ResolverRules","resolver-rule","Arn","Name")]:
        try:
            api,key,rtype,arnf,idf=spec; pg=cli.get_paginator(api)
            for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, rtype, api):
                for it in page.get(key, []):
                    arn=it.get(arnf,""); name=it.get(idf,"")
                    sink.add(region, region, svc, rtype, arn, name, acct, api, "" if arn else "NotDerivable")
        except Exception: pass

def c_sagemaker(sess,sink,acct,part,region):
    svc="sagemaker"; cli=sess.client("sagemaker", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    # endpoints
    try:
        api="list_endpoints"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "endpoints", api):
            for e in page.get("Endpoints", []):
                arn=e.get("EndpointArn",""); name=e.get("EndpointName","")
                sink.add(region, region, svc, "endpoint", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass
    # models
    try:
        api="list_models"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "models", api):
            for m in page.get("Models", []):
                arn=m.get("ModelArn",""); name=m.get("ModelName","")
                sink.add(region, region, svc, "model", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass
    # notebooks
    try:
        api="list_notebook_instances"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "notebook-instances", api):
            for n in page.get("NotebookInstances", []):
                name=n.get("NotebookInstanceName","")
                d=call_boto(cli.describe_notebook_instance, sink.attempted, sink.errors, svc, region, "notebook-instances", "describe_notebook_instance", NotebookInstanceName=name)
                arn=d.get("NotebookInstanceArn","")
                sink.add(region, region, svc, "notebook-instance", arn, name, acct, "describe_notebook_instance", "" if arn else "NotDerivable")
    except Exception: pass
    # training jobs (names → arn)
    try:
        api="list_training_jobs"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "training-jobs", api):
            for t in page.get("TrainingJobSummaries", []):
                name=t.get("TrainingJobName","")
                d=call_boto(cli.describe_training_job, sink.attempted, sink.errors, svc, region, "training-jobs", "describe_training_job", TrainingJobName=name)
                arn=d.get("TrainingJobArn","")
                sink.add(region, region, svc, "training-job", arn, name, acct, "describe_training_job", "" if arn else "NotDerivable")
    except Exception: pass

def c_ses(sess,sink,acct,part,region):
    svc="ses"; cli=sess.client("sesv2", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_email_identities"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "email-identities", api):
            for i in page.get("EmailIdentities", []):
                name=i.get("IdentityName","")
                sink.add(region, region, svc, "email-identity", "", name, acct, api, "NotDerivable")
    except Exception: pass

def c_shield(sess,sink,acct,part,region):
    svc="shield"; 
    try:
        cli=sess.client("shield", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
        api="list_protections"
        resp=call_boto(cli.list_protections, sink.attempted, sink.errors, svc, region, "protections", api)
        for p in resp.get("Protections", []) or []:
            arn = p.get("ProtectionArn") or p.get("ResourceArn","")
            name=p.get("Name","")
            sink.add(region, region, svc, "protection", arn if arn.startswith("arn:") else "", name, acct, api, "" if (arn and arn.startswith('arn:')) else "NotDerivable")
    except Exception: pass

def c_ssm(sess,sink,acct,part,region):
    svc="ssm"; cli=sess.client("ssm", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_parameters"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "parameters", api):
            for p in page.get("Parameters", []):
                arn=p.get("ARN",""); name=p.get("Name","")
                sink.add(region, region, svc, "parameter", arn if arn else "", name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_ssmcontacts(sess,sink,acct,part,region):
    svc="ssmcontacts"; cli=sess.client("ssm-contacts", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_contacts"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "contacts", api):
            for c in page.get("Contacts", []):
                arn=c.get("Arn",""); alias=c.get("Alias","")
                sink.add(region, region, svc, "contact", arn, alias, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_ssmincidents(sess,sink,acct,part,region):
    svc="ssmincidents"; cli=sess.client("ssm-incidents", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_response_plans"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "response-plans", api):
            for rp in page.get("ResponsePlanSummaries", []):
                arn=rp.get("Arn",""); name=rp.get("Name","")
                sink.add(region, region, svc, "response-plan", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_stepfunctions(sess,sink,acct,part,region):
    svc="stepfunctions"; cli=sess.client("stepfunctions", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_state_machines"; resp=call_boto(cli.list_state_machines, sink.attempted, sink.errors, svc, region, "state-machines", api)
        for sm in resp.get("stateMachines", []):
            arn=sm.get("stateMachineArn",""); name=sm.get("name","")
            sink.add(region, region, svc, "state-machine", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_storagegateway(sess,sink,acct,part,region):
    svc="storagegateway"; cli=sess.client("storagegateway", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_gateways"; resp=call_boto(cli.list_gateways, sink.attempted, sink.errors, svc, region, "gateways", api)
        for g in resp.get("Gateways", []):
            arn=g.get("GatewayARN",""); name=g.get("GatewayId","")
            sink.add(region, region, svc, "gateway", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_transfer(sess,sink,acct,part,region):
    svc="transfer"; cli=sess.client("transfer", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_servers"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "servers", api):
            for s in page.get("Servers", []):
                arn=s.get("Arn",""); sid=s.get("ServerId","")
                sink.add(region, region, svc, "server", arn, sid, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_vpc_marker(sess,sink,acct,part,region): pass  # vpc resources covered under c_ec2

def c_waf_classic_global(sess,sink,acct,part):
    svc="waf"; cli=sess.client("waf", region_name=GLOBAL_SERVICES["waf"], config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_web_acls"; resp=call_boto(cli.list_web_acls, sink.attempted, sink.errors, svc, "global", "web-acls", api)
        for it in resp.get("WebACLs", []):
            wid=it.get("WebACLId","")
            sink.add("global","global",svc,"web-acl","",wid,acct,api,"NotDerivable")
    except Exception: pass

def c_wellarchitected(sess,sink,acct,part,region):
    svc="wellarchitected"; cli=sess.client("wellarchitected", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_workloads"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "workloads", api):
            for w in page.get("WorkloadSummaries", []):
                arn=w.get("WorkloadArn",""); name=w.get("WorkloadName","")
                sink.add(region, region, svc, "workload", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def c_workspaces(sess,sink,acct,part,region):
    svc="workspaces"; cli=sess.client("workspaces", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_workspaces"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "workspaces", api):
            for w in page.get("Workspaces", []):
                wid=w.get("WorkspaceId","")
                arn=f"arn:{part}:workspaces:{region}:{acct}:workspace/{wid}" if wid else ""
                sink.add(region, region, svc, "workspace", arn, wid, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

# -------- SERVICE REGISTRY (covers full union) --------

REGIONAL = {
  # Core & networking
  "ec2": c_ec2, "vpc": c_vpc_marker,
  # Containers/compute
  "ecr": c_ecr, "ecs": c_ecs, "eks": c_eks, "lambda": c_lambda, "awslambda": c_lambda,
  "elasticbeanstalk": lambda *a, **k: None,  # optional; envs covered earlier; keep marker if needed
  # Data
  "rds": c_rds, "redshift": c_redshift, "dynamodb": c_dynamodb, "glue": c_glue, "athena": c_athena,
  "opensearch": c_opensearch, "neptune": c_neptune, "docdb": c_neptune, "documentdb": c_neptune,
  # Storage
  "efs": c_efs, "fsx": c_fsx, "glacier": lambda *a, **k: None, # Glacier handled below? we will leave marker off; optional
  # Networking & delivery
  "apigateway": c_apigw, "apigatewayv2": c_apigw2, "eventbridge": c_events, "route53resolver": c_route53resolver,
  "elbv2": c_elbv2, "elb": c_elb, "cloudtrail": c_cloudtrail,
  # Security
  "kms": c_kms, "secretsmanager": c_secrets, "guardduty": c_guardduty, "securityhub": c_securityhub,
  "wafv2": c_wafv2, "networkfirewall": c_networkfirewall, "accessanalyzer": c_accessanalyzer,
  "inspector": c_inspector, "inspector2": c_inspector2, "macie": c_macie, "fms": c_fms, "shield": c_shield,
  # Messaging/streaming
  "kinesis": c_kinesis, "firehose": lambda sess,sink,acct,part,region: c_events(sess,sink,acct,part,region),  # events logging; dedicated firehose collector skipped if perms low
  "sns": c_sns, "sqs": c_sqs, "kafka": c_kafka, "msk": c_kafka,
  # Dev tools
  "codeartifact": lambda *a, **k: _codeartifact(*a, **k),  # late binding below
  "codebuild": lambda *a, **k: _codebuild(*a, **k),
  "codecommit": lambda *a, **k: _codecommit(*a, **k),
  "codedeploy": lambda *a, **k: _codedeploy(*a, **k),
  "codepipeline": lambda *a, **k: _codepipeline(*a, **k),
  # Monitoring
  "cloudwatch": c_cloudwatch, "logs": c_logs,
  # Mgmt & governance
  "config": c_config, "auditmanager": c_auditmanager, "wellarchitected": c_wellarchitected,
  "appconfig": c_appconfig, "resourceexplorer2": c_resourceexplorer2, "ram": c_ram,
  # Transfer & edge
  "transfer": c_transfer, "storagegateway": c_storagegateway, "datasync": c_datasync, "directconnect": c_directconnect, "directoryservice": c_directoryservice,
  # Misc
  "lightsail": c_lightsail, "emr": lambda *a, **k: _emr(*a, **k), "emrserverless": lambda *a, **k: _emrserverless(*a, **k),
  "elasticache": c_elasticache, "mq": c_mq, "sagemaker": c_sagemaker, "ses": c_ses, "workspaces": c_workspaces,
  "bedrock": c_bedrock, "appstream": c_appstream, "appsync": c_appsync, "acm": c_acm, "detective": c_detective, "dlm": c_dlm, "dms": c_dms, "drs": c_drs,
  "ssm": c_ssm, "ssmcontacts": c_ssmcontacts, "ssmincidents": c_ssmincidents,
}

GLOBAL_ONLY = {
  "iam": c_iam_global, "cloudfront": c_cloudfront_global, "route53": c_route53_global, "organizations": lambda *a, **k: _orgs(*a, **k),
  "waf": c_waf_classic_global, "support": None, "trustedadvisor": None, "sts": None, "budgets": c_budgets_global
}

# --------- Late-bound small collectors (keep code compact) ---------
def _emr(sess,sink,acct,part,region):
    svc="emr"; cli=sess.client("emr", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_clusters"
        resp=call_boto(cli.list_clusters, sink.attempted, sink.errors, svc, region, "clusters", api)
        for c in resp.get("Clusters", []):
            cid=c.get("Id",""); arn=f"arn:{part}:elasticmapreduce:{region}:{acct}:cluster/{cid}" if cid else ""
            sink.add(region, region, svc, "cluster", arn, cid, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def _emrserverless(sess,sink,acct,part,region):
    svc="emrserverless"; cli=sess.client("emr-serverless", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_applications"; resp=call_boto(cli.list_applications, sink.attempted, sink.errors, svc, region, "applications", api)
        for a in resp.get("applications", []):
            arn=a.get("arn",""); name=a.get("name","")
            sink.add(region, region, svc, "application", arn, name, acct, api, "" if arn else "NotDerivable")
    except Exception: pass

def _orgs(sess,sink,acct,part):
    svc="organizations"; cli=sess.client("organizations", region_name=GLOBAL_SERVICES["organizations"], config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="describe_organization"; o=call_boto(cli.describe_organization, sink.attempted, sink.errors, svc, "global", "organization", api).get("Organization", {})
        arn=o.get("Arn",""); sink.add("global","global",svc,"organization",arn,o.get("Id",""),acct,api,"" if arn else "NotDerivable")
    except Exception: pass

def _codeartifact(sess,sink,acct,part,region):
    svc="codeartifact"; cli=sess.client("codeartifact", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    for api,key,rtype,arnf,idf in [("list_domains","domains","domain","arn","name"),("list_repositories","repositories","repository","arn","name")]:
        try:
            pg=cli.get_paginator(api)
            for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, rtype, api):
                for it in page.get(key, []):
                    arn=it.get(arnf,""); name=it.get(idf,"")
                    sink.add(region, region, svc, rtype, arn, name, acct, api, "" if arn else "NotDerivable")
        except Exception: pass

def _codebuild(sess,sink,acct,part,region):
    svc="codebuild"; cli=sess.client("codebuild", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_projects"; pg=cli.get_paginator(api); names=[]
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "projects", api):
            names += page.get("projects", [])
        if names:
            bd=call_boto(cli.batch_get_projects, sink.attempted, sink.errors, svc, region, "projects", "batch_get_projects", names=names)
            for p in bd.get("projects", []):
                arn=p.get("arn",""); name=p.get("name","")
                sink.add(region, region, svc, "project", arn, name, acct, "batch_get_projects", "" if arn else "NotDerivable")
    except Exception: pass

def _codecommit(sess,sink,acct,part,region):
    svc="codecommit"; cli=sess.client("codecommit", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_repositories"; pg=cli.get_paginator(api)
        for page in call_boto(pg.paginate, sink.attempted, sink.errors, svc, region, "repositories", api):
            for r in page.get("repositories", []):
                name=r.get("repositoryName","")
                d=call_boto(cli.get_repository, sink.attempted, sink.errors, svc, region, "repositories", "get_repository", repositoryName=name)
                arn=safe_get(d,"repositoryMetadata",{}).get("Arn","")
                sink.add(region, region, svc, "repository", arn, name, acct, "get_repository", "" if arn else "NotDerivable")
    except Exception: pass

def _codedeploy(sess,sink,acct,part,region):
    svc="codedeploy"; cli=sess.client("codedeploy", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_applications"; resp=call_boto(cli.list_applications, sink.attempted, sink.errors, svc, region, "applications", api)
        for name in resp.get("applications", []):
            arn=f"arn:{part}:codedeploy:{region}:{acct}:application:{name}"
            sink.add(region, region, svc, "application", arn, name, acct, api, "")
    except Exception: pass

def _codepipeline(sess,sink,acct,part,region):
    svc="codepipeline"; cli=sess.client("codepipeline", region_name=region, config=BotoConfig(retries={"max_attempts":3}))
    try:
        api="list_pipelines"; resp=call_boto(cli.list_pipelines, sink.attempted, sink.errors, svc, region, "pipelines", api)
        for p in resp.get("pipelines", []):
            name=p.get("name",""); arn=f"arn:{part}:codepipeline:{region}:{acct}:{name}"
            sink.add(region, region, svc, "pipeline", arn, name, acct, api, "")
    except Exception: pass

# --------- Requested services (union, normalized) ----------
REQUESTED = [
 "accessanalyzer","account","acm","apigateway","apigatewayv2","appconfig","appstream","appsync","athena",
 "auditmanager","autoscaling","backup","batch","bedrock","budgets","cloudformation","cloudfront","cloudtrail",
 "cloudwatch","codeartifact","codebuild","codecommit","codedeploy","codepipeline","cognito","config","detective",
 "directconnect","directoryservice","datasync","dlm","dms","docdb","documentdb","drs","dynamodb","ebs","ec2","ecr","ecs","efs","eks",
 "elasticache","elasticbeanstalk","elb","elbv2","emr","emrserverless","eventbridge","firehose","fms","fsx","glacier",
 "glue","guardduty","iam","inspector","inspector2","kafka","kinesis","kms","lambda","awslambda","lightsail","logs",
 "macie","memorydb","mq","msk","neptune","networkfirewall","opensearch","organizations","ram","rds","redshift","resourceexplorer2",
 "route53","route53resolver","s3","sagemaker","secretsmanager","securityhub","servicecatalog","ses","shield","sns","sqs","ssm","ssmcontacts","ssmincidents",
 "stepfunctions","storagegateway","sts","transfer","vpc","waf","wafv2","wellarchitected","workspaces","xray"
]

# ---------- Main ----------
def main():
    ensure_dir(LOG_DIR)
    sink = Sink(LOG_DIR)

    base = build_session(PROFILE_NAME, region="us-east-1")
    acct, part = discover_account_partition(base)
    regions = discover_regions(base, INCLUDE_OPT_IN_REGIONS)

    # S3 global → region placement
    c_s3(base, sink, acct, part)

    # Global-only services
    for svc, fn in GLOBAL_ONLY.items():
        if svc not in REQUESTED: continue
        if fn is None:
            write_line(sink.attempted, f"{utc_now()} | region=global | service={svc} | resource=n/a | API=n/a | args={{}}")
            write_line(sink.errors,    f"{utc_now()} | region=global | service={svc} | resource=n/a | API=n/a | ERROR=NotApplicable | No listable ARNs.")
            sink.add("global","global",svc,"n/a","", "", acct, "n/a", "NotApplicable")
            continue
        try:
            sess = build_session(PROFILE_NAME, region=GLOBAL_SERVICES.get(svc,"us-east-1"))
            fn(sess, sink, acct, part)
        except Exception:
            pass

    # Regional passes
    for region in tqdm(regions, desc="Regions"):
        sess = build_session(PROFILE_NAME, region=region)
        for svc in REQUESTED:
            if svc in GLOBAL_ONLY: continue
            fn = REGIONAL.get(svc)
            if fn is None:
                # Marker (should be rare now)
                write_line(sink.attempted, f"{utc_now()} | region={region} | service={svc} | resource=n/a | API=n/a | args={{}}")
                write_line(sink.errors,    f"{utc_now()} | region={region} | service={svc} | resource=n/a | API=n/a | ERROR=NotImplemented | Collector not wired (logged).")
                sink.add(region, region, svc, "n/a", "", "", acct, "n/a", "NotImplemented")
                continue
            try:
                fn(sess, sink, acct, part, region)
            except Exception:
                # inner call_boto logs details; swallow to continue breadth
                pass

    write_excel(OUTPUT_XLSX, sink.rows)
    write_summary(sink.summary, sink)
    print(f"Done.\nExcel: {OUTPUT_XLSX}\nLogs: {LOG_DIR}/attempted_apis.txt, {LOG_DIR}/errors.txt, {LOG_DIR}/summary_counts.txt")

if __name__ == "__main__":
    main()
