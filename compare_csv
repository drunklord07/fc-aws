#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import csv
from collections import defaultdict, Counter

# ========= CONFIGURATION ========= #
INPUT_FOLDER = "prowler_outputs"      # Hardcoded input folder (must contain 4 CSVs)
OUTPUT_FILE = "comparison_report.txt" # Hardcoded output file name
EXPECTED_FILES = 4
# ================================= #

def load_csv(filepath):
    """Load Prowler CSV file into dict keyed by (resource_uid, check_id)."""
    data = {}
    totals = Counter()
    issues = []
    check_ids = set()

    with open(filepath, newline='', encoding="utf-8") as f:
        reader = csv.DictReader(f, delimiter=';')
        for line_num, row in enumerate(reader, start=2):  # start=2 to account for header
            check_id = row.get("CHECK_ID", "").strip()
            check_title = row.get("CHECK_TITLE", "").strip()
            resource_uid = row.get("RESOURCE_UID", "").strip()
            resource_name = row.get("RESOURCE_NAME", "").strip()
            status = row.get("STATUS", "").strip().upper()
            muted = row.get("MUTED", "").strip().upper()

            # Track coverage
            if check_id:
                check_ids.add(check_id)

            # Data quality checks
            if not check_id:
                issues.append(f"{os.path.basename(filepath)} line {line_num} → missing CHECK_ID")
            if not resource_uid:
                issues.append(f"{os.path.basename(filepath)} line {line_num} → missing RESOURCE_UID")
            if status not in {"PASS", "FAIL", "WARN", "MUTED", ""}:
                issues.append(f"{os.path.basename(filepath)} line {line_num} → invalid STATUS: {status}")

            if not resource_uid or not check_id:
                continue

            key = (resource_uid, check_id)
            data[key] = {
                "check_id": check_id,
                "check_title": check_title,
                "resource_uid": resource_uid,
                "resource_name": resource_name,
                "status": status,
                "muted": muted == "TRUE" or status == "MUTED",
            }

            # Count for summary
            totals[status] += 1
            if muted == "TRUE" or status == "MUTED":
                totals["MUTED"] += 1
        totals["TOTAL"] = sum(totals.values())
    return data, totals, check_ids, issues


def main():
    # Collect CSV files
    files = [os.path.join(INPUT_FOLDER, f) for f in os.listdir(INPUT_FOLDER) if f.endswith(".csv")]
    files.sort()
    if len(files) != EXPECTED_FILES:
        raise RuntimeError(f"Expected {EXPECTED_FILES} CSVs in {INPUT_FOLDER}, found {len(files)}")

    file_labels = [os.path.basename(f) for f in files]

    # Load all CSVs
    datasets, file_totals, file_checks, file_issues = [], [], [], []
    for f in files:
        data, totals, checks, issues = load_csv(f)
        datasets.append(data)
        file_totals.append(totals)
        file_checks.append(checks)
        file_issues.extend(issues)

    # Collect all unique keys and checks
    all_keys = set()
    for data in datasets:
        all_keys.update(data.keys())
    all_checks = set().union(*file_checks)

    differences = []
    per_check_stats = defaultdict(lambda: Counter())
    checkid_to_title = {}

    # Compare across files
    for key in all_keys:
        resource_uid, check_id = key
        statuses, muted_flags = [], []
        check_title, resource_name = "", ""

        for data in datasets:
            entry = data.get(key)
            if entry:
                statuses.append(entry["status"])
                muted_flags.append(entry["muted"])
                check_title = entry["check_title"]
                resource_name = entry["resource_name"]
            else:
                statuses.append("MISSING")
                muted_flags.append(False)

        flags = []
        unique_statuses = {s for s in statuses if s != "MISSING"}
        if all(s != "MISSING" for s in statuses) and len(unique_statuses) > 1:
            flags.append("DIFFERENT")
            per_check_stats[check_id]["different"] += 1
        elif any(s == "MISSING" for s in statuses):
            if len(unique_statuses) == 1:
                flags.append("MISSING BUT SAME")
                per_check_stats[check_id]["missing_same"] += 1
            elif len(unique_statuses) > 1:
                flags.append("MISSING BUT DIFFERENT")
                per_check_stats[check_id]["missing_diff"] += 1
        if any(muted_flags):
            flags.append("MUTED")
            per_check_stats[check_id]["muted"] += 1

        if flags:
            differences.append({
                "resource_uid": resource_uid,
                "resource_name": resource_name,
                "check_id": check_id,
                "check_title": check_title,
                "statuses": statuses,
                "flags": flags
            })
            checkid_to_title[check_id] = check_title

    # Totals
    total_different = sum(v["different"] for v in per_check_stats.values())
    total_missing_same = sum(v["missing_same"] for v in per_check_stats.values())
    total_missing_diff = sum(v["missing_diff"] for v in per_check_stats.values())
    total_muted = sum(v["muted"] for v in per_check_stats.values())
    controls_with_diffs = len(per_check_stats)
    unique_controls = len(all_checks)

    # ===== Write Report ===== #
    with open(OUTPUT_FILE, "w", encoding="utf-8") as out:
        # --- Summary ---
        out.write("===== SUMMARY =====\n")
        out.write("--- File Statistics ---\n")
        for fname, totals in zip(file_labels, file_totals):
            out.write(
                f"{fname} → PASS: {totals['PASS']}, FAIL: {totals['FAIL']}, "
                f"WARN: {totals['WARN']}, MUTED: {totals['MUTED']}, TOTAL: {totals['TOTAL']}\n"
            )
        out.write("\n--- Differences Statistics ---\n")
        out.write(
            f"Different (all present, statuses differ): {total_different}\n"
            f"Missing but same: {total_missing_same}\n"
            f"Missing but different: {total_missing_diff}\n"
            f"Muted findings: {total_muted}\n"
            f"Controls with differences: {controls_with_diffs}\n"
            f"Unique controls in all files: {unique_controls}\n\n"
        )

        # --- Detailed Section (grouped by control) ---
        out.write("===== DETAILED DIFFERENCES =====\n")
        controls_seen = set()
        for diff in sorted(differences, key=lambda x: (x["check_id"], x["resource_uid"])):
            cid = diff["check_id"]
            if cid not in controls_seen:
                controls_seen.add(cid)
                out.write(f"\n===== CONTROL: {cid.upper()} =====\n")
                out.write(f"Title: {diff['check_title']}\n\n")

            out.write(f"ResourceUID: {diff['resource_uid']}\n")
            out.write(f"ResourceName: {diff['resource_name']}\n")
            for fname, status in zip(file_labels, diff["statuses"]):
                out.write(f"{fname}: {status}\n")
            out.write(f"→ Flags: {', '.join(diff['flags'])}\n\n")

        # --- Per-Check Breakdown ---
        out.write("===== PER-CHECK DIFFERENCES =====\n")
        for check_id, stats in per_check_stats.items():
            parts = []
            if stats["different"]:
                parts.append(f"{stats['different']} different")
            if stats["missing_same"]:
                parts.append(f"{stats['missing_same']} missing but same")
            if stats["missing_diff"]:
                parts.append(f"{stats['missing_diff']} missing but different")
            if stats["muted"]:
                parts.append(f"{stats['muted']} muted")
            if parts:
                out.write(f"{check_id} → {', '.join(parts)}\n")

        # --- Checks Coverage ---
        out.write("\n===== CHECKS COVERAGE =====\n")
        for fname, checks in zip(file_labels, file_checks):
            missing = all_checks - checks
            if missing:
                out.write(f"{fname} is missing {len(missing)} checks: {', '.join(sorted(missing))}\n")
            else:
                out.write(f"{fname} → All {len(all_checks)} checks present\n")

        # --- Data Quality Issues ---
        out.write("\n===== DATA QUALITY ISSUES =====\n")
        if file_issues:
            for issue in file_issues:
                out.write(issue + "\n")
        else:
            out.write("No data quality issues found\n")

        # --- Overall Totals ---
        out.write("\n===== OVERALL TOTALS =====\n")
        out.write(
            f"Different (all present, statuses differ): {total_different}\n"
            f"Missing but same: {total_missing_same}\n"
            f"Missing but different: {total_missing_diff}\n"
            f"Muted findings: {total_muted}\n"
            f"Controls with differences: {controls_with_diffs}\n"
            f"Unique controls in all files: {unique_controls}\n"
        )

    print(f"Comparison report written to {OUTPUT_FILE}")


if __name__ == "__main__":
    main()
