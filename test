#!/usr/bin/env bash
# EC2 public-subnet audit. Uses whatever creds the shell is using.
# Output: region,instance_id,subnet_id,route_table_id,status

set -euo pipefail
export AWS_PAGER=""

# Sanity: must be able to call STS with THESE creds
aws sts get-caller-identity >/dev/null

echo "region,instance_id,subnet_id,route_table_id,status"

# All regions (no --profile anywhere)
for REGION in $(aws ec2 describe-regions --query 'Regions[].RegionName' --output text); do

  # InstanceId SubnetId VpcId (only running)
  aws ec2 describe-instances --region "$REGION" \
    --query 'Reservations[].Instances[?State.Name==`running`].[InstanceId,SubnetId,VpcId]' \
    --output text \
  | while read -r INSTANCE_ID SUBNET_ID VPC_ID; do
      # Subnetâ€™s route table
      RTB_ID=$(aws ec2 describe-route-tables --region "$REGION" \
               --filters "Name=association.subnet-id,Values=$SUBNET_ID" \
               --query 'RouteTables[0].RouteTableId' --output text 2>/dev/null || true)

      # Fallback to VPC main route table
      if [ -z "${RTB_ID:-}" ] || [ "$RTB_ID" = "None" ]; then
        RTB_ID=$(aws ec2 describe-route-tables --region "$REGION" \
                 --filters "Name=vpc-id,Values=$VPC_ID" "Name=association.main,Values=true" \
                 --query 'RouteTables[0].RouteTableId' --output text 2>/dev/null || true)
      fi

      # Public subnet if default route (0.0.0.0/0) goes to an Internet Gateway
      IGW=$(aws ec2 describe-route-tables --region "$REGION" \
            --route-table-ids "${RTB_ID:-}" \
            --query "RouteTables[].Routes[?DestinationCidrBlock=='0.0.0.0/0' && contains(GatewayId, 'igw-')]" \
            --output text 2>/dev/null || true)

      if [ -z "${RTB_ID:-}" ] || [ "$RTB_ID" = "None" ]; then
        STATUS="UNKNOWN"
      elif [ -n "$IGW" ]; then
        STATUS="NON_COMPLIANT"
      else
        STATUS="COMPLIANT"
      fi

      echo "$REGION,$INSTANCE_ID,$SUBNET_ID,${RTB_ID:-},$STATUS"
    done
done
